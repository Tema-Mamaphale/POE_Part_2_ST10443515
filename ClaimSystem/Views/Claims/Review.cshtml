@model List<ClaimSystem.Models.Claim>
@using ClaimSystem.Models

@{
    ViewData["Title"] = "Coordinator Review";

    bool CanDecide(ClaimStatus s) => s == ClaimStatus.Submitted;

    string StatusBadge(ClaimStatus s) => s switch
    {
        ClaimStatus.Submitted => "badge badge-submitted",
        ClaimStatus.PendingReview => "badge badge-review",
        ClaimStatus.Approved => "badge badge-approved",
        ClaimStatus.Rejected => "badge badge-rejected",
        _ => "badge"
    };

    var total = Model?.Count ?? 0;
}

<div class="card p-4">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <div class="d-flex align-items-center gap-2">
            <span class="icon-pill"><i class="bi bi-clipboard-check"></i></span>
            <h1 class="h3 brand-serif mb-0">Programme Coordinator — Submitted Claims</h1>
        </div>
        <div class="d-flex gap-2">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input id="searchBox" class="form-control" placeholder="Search lecturer or month" />
            </div>
        </div>
    </div>

    @if (TempData["ok"] is string ok && !string.IsNullOrWhiteSpace(ok))
    {
        <div class="alert alert-success d-flex align-items-center" role="alert">
            <i class="bi bi-check2-circle me-2"></i>@ok
        </div>
    }
    @if (TempData["err"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>@err
        </div>
    }

    @if (total == 0)
    {
        <div class="text-center py-5">
            <div class="mb-2"><i class="bi bi-inbox fs-1 text-muted"></i></div>
            <p class="mb-1 brand-serif h5">No submitted claims</p>
            <p class="text-muted">Once lecturers submit, items will appear here for triage.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table align-middle mb-0" id="claimsTable">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Lecturer</th>
                        <th>Month</th>
                        <th>Hours</th>
                        <th>Rate</th>
                        <th>Amount</th>
                        <th>Attachment</th>
                        <th>Status</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in Model)
                    {
                        var canAct = CanDecide(c.Status);
                        <tr data-name="@c.LecturerName" data-month="@c.Month" data-status="@c.Status">
                            <td>@c.Id</td>
                            <td>@c.LecturerName</td>
                            <td>@c.Month</td>
                            <td>@c.HoursWorked.ToString("N2")</td>
                            <td>R @c.HourlyRate.ToString("N2")</td>
                            <td>R @c.CalculatedAmount.ToString("N2")</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(c.AttachmentFileName) && !string.IsNullOrWhiteSpace(c.AttachmentStoredName))
                                {
                                    <a class="link-underline"
                                       href="~/uploads/claims/@c.Id/@c.AttachmentStoredName"
                                       download="@c.AttachmentFileName"
                                       title="Download @c.AttachmentFileName">
                                        @c.AttachmentFileName
                                    </a>
                                }
                                else
                                {

                                    <span>-</span>
                                }
                            </td>
                            <td>
                                <span class="@StatusBadge(c.Status)" aria-label="Status: @c.Status">@c.Status</span>
                            </td>
                            <td class="text-end">
                                <a class="btn btn-light btn-sm me-1"
                                   asp-action="Status" asp-route-id="@c.Id" title="Track this claim">
                                    <i class="bi bi-graph-up-arrow me-1"></i>Track
                                </a>

                                <form asp-action="CoordinatorApprove" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@c.Id" />
                                    <button class="btn btn-olive btn-sm" title="Send to Manager" @(canAct ? null : "disabled")>
                                        <i class="bi bi-check-lg me-1"></i>Send to Manager
                                    </button>
                                </form>

                                <form asp-action="CoordinatorReject" method="post" class="d-inline ms-1">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@c.Id" />
                                    <input type="hidden" name="reason" value="Incomplete or incorrect documentation" />
                                    <button class="btn btn-ghost btn-sm btn-reject" title="Reject" @(canAct ? null : "disabled")>
                                        <i class="bi bi-x-lg me-1"></i>Reject
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="text-muted small mt-2">
            Showing <span id="visibleCount">@total</span> of @total claim(s).
        </div>
    }
</div>

@section Scripts {
    <script>
       
        const q = document.getElementById('searchBox');
        const rows = () => Array.from(document.querySelectorAll('#claimsTable tbody tr'));
        const visibleCount = document.getElementById('visibleCount');

        function applyFilters() {
            const term = (q?.value || "").toLowerCase();
            let shown = 0;
            rows().forEach(r => {
                const okText = !term
                    || r.dataset.name.toLowerCase().includes(term)
                    || r.dataset.month.toLowerCase().includes(term);
                const show = okText && r.dataset.status === "Submitted";
                r.style.display = show ? "" : "none";
                if (show) shown++;
            });
            if (visibleCount) visibleCount.textContent = shown;
        }

        q?.addEventListener('input', applyFilters);
        applyFilters();
    </script>
}
